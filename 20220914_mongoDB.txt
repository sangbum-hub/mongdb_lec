- emp collection 에서
- user_id 가 abc 로 시작하는 document 의 user_id 와 age 를 출력하세요
db.emp.find({user_id : /^abc/})

- emp collection 에서
- user_id 가 어떤 것이 있는지 알아보기
db.emp.distinct('user_id')

db.emp.insertMany(
    [
      {user_id :"bcd001", age : 45, status : "A"},
      {user_id :"bcd002", age : 25, status : "B"},
      {user_id :"bcd003", age : 50, status : "A"},
      {user_id :"bcd004", age : 35, status : "A"},
      {user_id :"abc001", age : 28, status : "B"}
    ]  
)

$eq      =  
$ne      !=   not equal 
$gt      >
$gte     >=
$lt      <
$lte     <=
$in      
$nin
- emp collection 에서
- age 가 55 미만인 document 의 user_id 와 age 를 출력하세요
db.emp.find({age:{$lt:55}}, {user_id:1, age:1, _id:0})

- emp collection 에서
- age 가 50 이면서 status 가 A 인 user_id 만 출력하세요
db.emp.find({age : {$eq:50}, status:"A"}, {user_id:1,_id:0})



MongoDB 에서 document 수정하기 - update
- updateOne()
- updateMany()

- $set : key(field) 값 설정
- $inc : key(field) 값 을 증가시킴
            ㄴ $inc : {age : 2} <- age 를 2 증가시킴

- student collection 에서 
- (age)30 세 미만인 사람 한 명의 class 를 "C" 로 수정하기
                         조건,          수정명령 
db.student.updateOne({age : {$lt:30}},{$set:{class:"C"}})

- student collection 에서 
- (age)30 세 미만인 사람의 class 를 "C" 로 수정하기
                         조건,          수정명령 
db.student.updateMany({age : {$lt:30}},{$set:{class:"C"}})
 
[RDBMS] 
  UPDATE student SET class="C" WHERE age < 30
  
- student collection 에서 
- (age)30 세 미만인 사람의 age 와 class 를 출력하세요
db.student.find({age : {$lt:30}},{age:1, class:1, _id:0})


db.student.updateMany(
  {age : {$lt:30}},
  {$set:{class:"C"}}
)


- $inc : key(field) 값 을 증가시킴
            ㄴ $inc : {age : 2} <- age 를 2 증가시킴

- student collection 에서 class 가 C 인 사람의
- age 를 3 증가시키세요

[RDBMS]
  UPDATE student SET age = age + 3 WHERE class = "C"

수정전 age : 21
db.student.updateMany({class : "C"},{$inc:{age:3}})

수정후 age : 24
db.student.find({class:"C"}, {age:1, _id:0})


db.emp.insertMany(
    [
      {user_id :"bcd001", age : 45, status : "A"},
      {user_id :"bcd002", age : 25, status : "B"},
      {user_id :"bcd003", age : 50, status : "A"},
      {user_id :"bcd004", age : 35, status : "A"},
      {user_id :"abc001", age : 28, status : "B"}
    ]  
)
- emp collection 에서 age 가 30 미만인 document 의 
- status 를 "C" 로 수정하세요
수정
db.emp.updateMany({age : {$lt : 30}}, {$set:{status:"C"}})
확인 (find)
db.emp.find({age:{$lt:30}}, {status:1,_id:0})
db.emp.find({age:{$lt:30}}, {status:1,user_id:1,_id:0})



MongoDB 에서 document 삭제하기 - remove
- remove()
- deleteOne()
- deleteMany()


db.emp.insertMany(
    [
      {user_id :"bcd001", age : 45, status : "A"},
      {user_id :"bcd002", age : 25, status : "C"},
      {user_id :"bcd003", age : 50, status : "A"},
      {user_id :"bcd004", age : 35, status : "A"},
      {user_id :"abc001", age : 28, status : "C"}
    ]  
)

- emp collection 에서 status 가 A 인 document 를
- 삭제하세요
삭제
db.emp.remove({status:"A"})
조회
db.emp.find()


- emp collection 에서 statis key 삭제하기
db.emp.update({}, {$unset:{statis:1}},{multi:true})
조회
db.emp.find()

- emp collection 에서
- status 가 "C" 인 document 하나 삭제하기
db.emp.deleteOne({status:"C"})
조회
db.emp.find()

document 생성하기

db.emp.insertMany(
    [
      {user_id :"bcd001", age : 45, status : "A"},
      {user_id :"bcd002", age : 25, status : "C"},
      {user_id :"bcd003", age : 50, status : "A"},
      {user_id :"bcd004", age : 35, status : "A"},
      {user_id :"abc001", age : 28, status : "C"}
    ]  
)

조회
db.emp.find()

- emp collection 에서
- status 가 "C" 인 document 모두 삭제하기
db.emp.deleteMany({status:"C"})

조회
db.emp.find()

